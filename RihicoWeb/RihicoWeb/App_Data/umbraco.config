<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE root [<!ELEMENT umbMaster ANY>
<!ATTLIST umbMaster id ID #REQUIRED>
<!ELEMENT umbHomePage ANY>
<!ATTLIST umbHomePage id ID #REQUIRED>
<!ELEMENT umbNewsItem ANY>
<!ATTLIST umbNewsItem id ID #REQUIRED>
<!ELEMENT umbNewsOverview ANY>
<!ATTLIST umbNewsOverview id ID #REQUIRED>
<!ELEMENT umbTextPage ANY>
<!ATTLIST umbTextPage id ID #REQUIRED>
<!ELEMENT comic ANY>
<!ATTLIST comic id ID #REQUIRED>
]>
<root id="-1">
  <umbHomePage id="1056" key="c48ac6c9-443d-4512-9688-01a5d04149bf" parentID="-1" level="1" creatorID="0" sortOrder="0" createDate="2017-04-21T21:45:45" updateDate="2018-11-11T13:43:39" nodeName="Home" urlName="home" path="-1,1056" isDoc="" nodeType="1052" creatorName="xuebaibai2" writerName="xuebaibai2" writerID="0" template="1047" nodeTypeAlias="umbHomePage">
    <umbracoNaviHide>0</umbracoNaviHide>
    <title><![CDATA[Welcome to my super site]]></title>
    <linkedInLink><![CDATA[https://www.linkedin.com/in/yanfeng-li-a4793469/]]></linkedInLink>
    <bannerLinkText><![CDATA[Check my GitHub link]]></bannerLinkText>
    <bannerBackgroundImage><![CDATA[/media/SampleImages/1008/banner.jpg]]></bannerBackgroundImage>
    <bannerHeader><![CDATA[A site to publish and share my own coding knowledge.]]></bannerHeader>
    <hideBanner>0</hideBanner>
    <aboutTitle><![CDATA[About This Site]]></aboutTitle>
    <aboutText><![CDATA[<p>This site is created to intergrate multiple useful functionality.</p>]]></aboutText>
    <copyright><![CDATA[Yanfeng Li]]></copyright>
    <siteName><![CDATA[My Workbench]]></siteName>
    <umbTextPage id="1057" key="e464117e-28e0-4e84-a49a-ac04d8e1a4df" parentID="1056" level="2" creatorID="0" sortOrder="0" createDate="2017-04-21T21:45:46" updateDate="2018-11-11T13:31:35" nodeName="Sample Page" urlName="sample-page" path="-1,1056,1057" isDoc="" nodeType="1055" creatorName="xuebaibai2" writerName="xuebaibai2" writerID="0" template="1050" nodeTypeAlias="umbTextPage">
      <umbracoNaviHide>0</umbracoNaviHide>
      <title><![CDATA[Sample Page]]></title>
      <bodyText><![CDATA[<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque vel odio justo. Donec elementum convallis consectetur. Proin est risus, euismod sit amet sem ac, molestie consectetur elit. Cras dignissim mi sed dolor hendrerit, quis fermentum ipsum dictum. Maecenas egestas, quam sit amet cursus viverra, mauris velit mattis nunc, laoreet tincidunt augue diam nec justo. Etiam sollicitudin blandit volutpat. In id orci ultricies, faucibus velit in, vulputate urna. Phasellus auctor rhoncus mi, nec lobortis quam venenatis nec. Vestibulum porttitor eget lectus non facilisis. Proin lorem leo, posuere nec nisl id, cursus suscipit dui. Praesent finibus ipsum imperdiet, rhoncus turpis sit amet, efficitur massa. Aenean gravida feugiat mauris sed fringilla. Aenean odio magna, tempor a interdum at, euismod id augue.</p>
<p style="margin: 0px 0px 15px; padding: 0px; text-align: justify; color: #000000; font-family: 'Open Sans', Arial, sans-serif; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: #ffffff; text-decoration-style: initial; text-decoration-color: initial;">Ut aliquam iaculis congue. Maecenas eros velit, maximus a odio et, feugiat maximus diam. Mauris dignissim ultricies erat, vitae elementum felis volutpat nec. Sed sollicitudin arcu vel nisi pretium sagittis. Vivamus suscipit nibh vel tortor laoreet lobortis. Suspendisse potenti. Vivamus malesuada nec ipsum vel condimentum. Fusce aliquet sapien sit amet nisl faucibus, nec facilisis neque faucibus. Pellentesque in justo ullamcorper, finibus nibh id, elementum sem. Curabitur quis consequat felis, non pharetra neque. Sed aliquam euismod ipsum. Morbi lobortis sit amet eros et elementum.</p>]]></bodyText>
      <featuredPage>0</featuredPage>
      <image><![CDATA[/media/SampleImages/1063/pic01.jpg]]></image>
    </umbTextPage>
    <comic id="1067" key="37ea9b6a-8fbb-4b16-916c-727131981563" parentID="1056" level="2" creatorID="0" sortOrder="1" createDate="2017-04-21T22:23:20" updateDate="2018-11-11T13:08:55" nodeName="Comic" urlName="comic" path="-1,1056,1067" isDoc="" nodeType="1066" creatorName="xuebaibai2" writerName="xuebaibai2" writerID="0" template="0" nodeTypeAlias="comic">
      <umbracoNaviHide>0</umbracoNaviHide>
      <title><![CDATA[Comic Downloader]]></title>
    </comic>
    <umbTextPage id="1058" key="557b4d66-0af0-415e-b820-f1a3ee2638b2" parentID="1056" level="2" creatorID="0" sortOrder="2" createDate="2017-04-21T21:45:46" updateDate="2018-11-11T13:30:14" nodeName="Go Further" urlName="go-further" path="-1,1056,1058" isDoc="" nodeType="1055" creatorName="xuebaibai2" writerName="xuebaibai2" writerID="0" template="1050" nodeTypeAlias="umbTextPage">
      <umbracoNaviHide>1</umbracoNaviHide>
      <bodyText><![CDATA[<p>Donec tincidunt tortor vitae purus faucibus, nec ullamcorper mauris mollis. Praesent scelerisque, felis nec vulputate egestas, metus elit ornare lorem, non tristique orci magna eu lorem. Nam id aliquam tortor, nec pulvinar lorem. Curabitur sit amet massa quis augue egestas pretium. Suspendisse eu augue vel sapien tincidunt elementum. Nulla facilisi. Suspendisse venenatis finibus purus porttitor egestas. Morbi aliquet bibendum leo at tincidunt. Aliquam erat volutpat. Suspendisse potenti. Maecenas et dapibus lectus, a finibus orci.</p>
<p style="margin: 0px 0px 15px; padding: 0px; text-align: justify; color: #000000; font-family: 'Open Sans', Arial, sans-serif; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: #ffffff; text-decoration-style: initial; text-decoration-color: initial;">Sed volutpat felis diam, et pharetra urna aliquet eget. Donec semper eget felis ac volutpat. In tincidunt lectus id dolor imperdiet ultrices. Nullam aliquam bibendum venenatis. Quisque molestie sem sit amet neque rutrum gravida. Quisque sollicitudin ante ac dolor tincidunt ornare. Praesent felis felis, gravida eu lorem eu, euismod vestibulum justo. Proin mauris nunc, facilisis et fringilla sed, congue sed sapien. Fusce at nisl eget mauris suscipit semper ut eu urna. Etiam ac velit condimentum erat consequat finibus. Ut finibus, lacus ut varius tristique, lacus dui feugiat diam, eu pharetra lectus orci nec magna. Cras mattis id massa sed aliquam. Curabitur cursus eu diam et bibendum. Praesent feugiat pharetra magna id accumsan. Cras vitae nisi dapibus, dapibus lacus ac, congue dui. Fusce velit ipsum, interdum vulputate dictum at, laoreet pharetra ante.</p>]]></bodyText>
      <featuredPage>0</featuredPage>
      <image><![CDATA[/media/SampleImages/1060/pic02.jpg]]></image>
    </umbTextPage>
    <umbTextPage id="1059" key="d68a426f-4e6a-4d54-8f8a-34b23d7dc5b4" parentID="1056" level="2" creatorID="0" sortOrder="3" createDate="2017-04-21T21:45:47" updateDate="2018-11-11T13:29:59" nodeName="Installing Modules" urlName="installing-modules" path="-1,1056,1059" isDoc="" nodeType="1055" creatorName="xuebaibai2" writerName="xuebaibai2" writerID="0" template="1050" nodeTypeAlias="umbTextPage">
      <umbracoNaviHide>1</umbracoNaviHide>
      <bodyText><![CDATA[<p><span style="color: #000000; font-family: 'Open Sans', Arial, sans-serif; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: justify; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: #ffffff; text-decoration-style: initial; text-decoration-color: initial; display: inline !important; float: none;">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque vel odio justo. Donec elementum convallis consectetur. Proin est risus, euismod sit amet sem ac, molestie consectetur elit. Cras dignissim mi sed dolor hendrerit, quis fermentum ipsum dictum. Maecenas egestas, quam sit amet cursus viverra, mauris velit mattis nunc, laoreet tincidunt augue diam nec justo. Etiam sollicitudin blandit volutpat. In id orci ultricies, faucibus velit in, vulputate urna. Phasellus auctor rhoncus mi, nec lobortis quam venenatis nec. Vestibulum porttitor eget lectus non facilisis. Proin lorem leo, posuere nec nisl id, cursus suscipit dui. Praesent finibus ipsum imperdiet, rhoncus turpis sit amet, efficitur massa. Aenean gravida feugiat mauris sed fringilla. Aenean odio magna, tempor a interdum at, euismod id augue.</span></p>]]></bodyText>
      <featuredPage>0</featuredPage>
      <image><![CDATA[/media/SampleImages/1061/pic04.jpg]]></image>
    </umbTextPage>
    <umbTextPage id="1060" key="93ced028-c700-45d9-961c-c854a462cdeb" parentID="1056" level="2" creatorID="0" sortOrder="4" createDate="2017-04-21T21:45:47" updateDate="2018-11-11T03:03:19" nodeName="About" urlName="about" path="-1,1056,1060" isDoc="" nodeType="1055" creatorName="xuebaibai2" writerName="xuebaibai2" writerID="0" template="1050" nodeTypeAlias="umbTextPage">
      <umbracoNaviHide>0</umbracoNaviHide>
      <title><![CDATA[Contact Me]]></title>
      <bodyText><![CDATA[<p><strong>Email</strong>: caydenli@outlook.com</p>
<p><strong>GitHub</strong>: <a href="https://github.com/xuebaibai2" target="_blank" title="GitHub">https://github.com/xuebaibai2</a></p>]]></bodyText>
      <featuredPage>1</featuredPage>
      <image><![CDATA[/media/1001/文件-16-2-26-17-27-15.jpeg]]></image>
    </umbTextPage>
    <umbNewsOverview id="1061" key="b9ff4de5-2b68-4ca3-8e47-0ad198fc5cba" parentID="1056" level="2" creatorID="0" sortOrder="5" createDate="2017-04-21T21:45:47" updateDate="2018-11-11T13:19:03" nodeName="News" urlName="news" path="-1,1056,1061" isDoc="" nodeType="1054" creatorName="xuebaibai2" writerName="xuebaibai2" writerID="0" template="1049" nodeTypeAlias="umbNewsOverview">
      <umbracoNaviHide>0</umbracoNaviHide>
      <title><![CDATA[Discovery log]]></title>
      <umbNewsItem id="1624" key="efe4918d-6421-490f-b75d-4e299077452c" parentID="1061" level="3" creatorID="0" sortOrder="4" createDate="2018-11-11T13:53:01" updateDate="2018-11-11T03:03:02" nodeName="Javascript Understading the Werid Parts" urlName="javascript-understading-the-werid-parts" path="-1,1056,1061,1624" isDoc="" nodeType="1053" creatorName="xuebaibai2" writerName="xuebaibai2" writerID="0" template="1048" nodeTypeAlias="umbNewsItem">
        <umbracoNaviHide>0</umbracoNaviHide>
        <title><![CDATA[Javascript Understading the Werid Parts]]></title>
        <bodyText><![CDATA[<ul style="list-style-type: disc !important;">
<li>There is aways a global object in a javascript.</li>
<li>All variables in javascript are initially set to ‘undefined’.</li>
<li>Execution context is created in two phases:</li>
<li>Phase one: Creation Phase =&gt; Global object set in the memory, ‘this’ set up in memory, Outer Environment is created, and Setup Memory Space for Variables (Variables’ actual value is not known by engine but just a placeholder/default value called ‘undefined' ) and Functions (<span style="box-sizing: border-box; color: #ff2929;">Functions are put entirely inside the memory</span>) named as “<span style="box-sizing: border-box; color: #ff2929;">Hoisting</span>” (Hoisting is a bad idea, should be better to define a variables and functions before using or calling them).</li>
<li>Phase two: Execution Phase =&gt; On top of Phase one, this phase will run the code line by line. Variables are set with actual value instead of ‘undefined’ by default if there is a value been set to them.</li>
<li>Event handler functions are queued on Event Queue within browser apart from Javascript engine, and will get occurred after all execution context is completed, which is when the Global Execution Context is completed. In other word, the javascript event handler will triggered after Global Execution Context is completed Execution Phase.</li>
<li>Async in Javascript is occurred outside of Javascript Engine within Browser, that is because the Javascript is a Single Threaded</li>
<li>console.log(3 &lt; 2 &lt; 1); ===&gt; True, because 3 &lt; 2 evaluate first and return False, then False &lt; 1 is been evaluated, which will convert False to a number 0, and 0 &lt; 1 is True.</li>
<li>console.log(1 &lt; 2 &lt; 3); ===&gt; True, because 1 &lt; 2 returns True, true &lt; 3 will convert true to number 1 and then 1 &lt; 3 returns True.</li>
<li>If reference other javascript file from the html page, it won’t create new Execution Context, but treat them all as a one single javascript file, which will have only on Execution Context.</li>
<li>In Javascript Functions are Objects</li>
</ul>]]></bodyText>
        <image><![CDATA[/media/1002/javascript.png]]></image>
      </umbNewsItem>
      <umbNewsItem id="1625" key="4d73f929-09d3-4189-99e5-fcd1e5eb0388" parentID="1061" level="3" creatorID="0" sortOrder="5" createDate="2018-11-11T03:08:21" updateDate="2018-11-11T03:23:51" nodeName="Javascript Basics" urlName="javascript-basics" path="-1,1056,1061,1625" isDoc="" nodeType="1053" creatorName="xuebaibai2" writerName="xuebaibai2" writerID="0" template="1048" nodeTypeAlias="umbNewsItem">
        <umbracoNaviHide>0</umbracoNaviHide>
        <title><![CDATA[JavasScript Basics]]></title>
        <bodyText><![CDATA[<table border="0" class="table table-striped">
<thead class="thead-dark">
<tr>
<th scope="col">Subject</th>
<th scope="col">Description</th>
<th scope="col">Example</th>
</tr>
</thead>
<tbody>
<tr>
<td class="" style="min-width: 200px;">
<div>Object</div>
</td>
<td class="" style="min-width: 400px;">
<div>A collections of name value pairs.</div>
</td>
<td class=""> </td>
</tr>
<tr>
<td class="">
<div>Window Object</div>
</td>
<td class="">
<div>Global object inside browsers. (*<span>For browsers</span>)</div>
</td>
<td class=""> </td>
</tr>
<tr>
<td class="">
<div>‘this'</div>
</td>
<td class="">
<div>At the global level, ’this’ = Global Object(Window Object), in other way, ‘this’ = Window.</div>
</td>
<td class=""> </td>
</tr>
<tr>
<td class="">
<div>Global</div>
</td>
<td class="">
<div>Not inside a <span>function</span>.</div>
</td>
<td class=""> </td>
</tr>
<tr>
<td class="">
<div>Global Execution Context</div>
</td>
<td class="">
<div>There is always one Global Execution Context in each Javascript, it include Global Object(‘this’), Outer Environment and developer’s code.</div>
</td>
<td class=""> </td>
</tr>
<tr>
<td class="">
<div>Execution Context (EC)</div>
</td>
<td class="">
<div>Created whenever a function get called, the scope is inside called function, won’t affect other execution context.</div>
<div></div>
<div>Every EC has a reference to its outer environment</div>
</td>
<td class="">
<div>function a() {</div>
<div>   var foo = ‘hello’;</div>
<div>   b();</div>
<div>}</div>
<div></div>
<div>function b() {</div>
<div>   var foo;</div>
<div>}</div>
<div></div>
<div>var foo = 1</div>
<div></div>
<div>*<span>All three foo variables are distinct, because they are in different execution context, which are a(), b() and the global execution context.</span></div>
</td>
</tr>
<tr>
<td class="">
<div>Scope</div>
</td>
<td class="">
<div>Where a variable is available in the code.</div>
</td>
<td class=""> </td>
</tr>
<tr>
<td class="">
<div>Undefined</div>
</td>
<td class="">
<div>A variable is created in the memory but the value of that variable hasn’t been set. All variables in Javascript are initially set to Undefined.</div>
<div>Undefined is a keyword or a special value in the Javascript. I have not set this value.</div>
</td>
<td class=""> </td>
</tr>
<tr>
<td class="">
<div>XXX is not defined</div>
</td>
<td class="">
<div>Can not find a variable with name XXX.</div>
</td>
<td class=""> </td>
</tr>
<tr>
<td class="">
<div>Function</div>
</td>
<td class="">
<div>Function are setting in memory <span>entirely</span>.</div>
</td>
<td class=""> </td>
</tr>
<tr>
<td class="">
<div>Single Threaded</div>
</td>
<td class="">
<div>On command at a time.</div>
</td>
<td class=""> </td>
</tr>
<tr>
<td class="">
<div>Invocation</div>
</td>
<td class="">
<div>Running/Calling a function, by using parenthesis ().</div>
</td>
<td class=""> </td>
</tr>
<tr>
<td class="">
<div>Variable Environment</div>
</td>
<td class="">
<div>Where the variables live.</div>
</td>
<td class=""> </td>
</tr>
<tr>
<td class="">
<div>let</div>
</td>
<td class="">
<div>block scoping, when a variable is declared in the block {}, it is only available inside that block.</div>
</td>
<td class=""> </td>
</tr>
<tr>
<td class="">
<div>Dynamic Typing</div>
</td>
<td class="">
<div>You don’t tell the engine what type of data a variable holds, it figures it out while your the is running.</div>
</td>
<td class=""> </td>
</tr>
<tr>
<td class="">
<div>Primitive type</div>
</td>
<td class="">
<div>A type of data that represents a single value. It is no an object.</div>
<div><span>Undefined</span>: represents lack of existence (should never set a variable to undefined)</div>
<div><span>NULL</span>: represents lack of existence (can be set a variable to NULL if necessary)</div>
<div><span>Boolean</span>: Ture or False</div>
<div><span>Number</span>: Floating point number ( there’s always some decimals).</div>
<div><span>String</span>: A sequence of characters.</div>
<div><span>Symbol</span>: Used in ES6.</div>
</td>
<td class=""> </td>
</tr>
<tr>
<td class="">
<div>Operator</div>
</td>
<td class="">
<div>A special function that is syntactically (written) differently.</div>
</td>
<td class=""> </td>
</tr>
<tr>
<td class="">
<div>Operator Precedence</div>
</td>
<td class="">
<div>Which operator function gets called first.</div>
</td>
<td class="">
<div>https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence</div>
</td>
</tr>
<tr>
<td class="">
<div>Operator Associativity</div>
</td>
<td class="">
<div>What order operator functions get called in left-to-right or right-to-left.</div>
</td>
<td class="">
<div>var a = 3, b = 4, c = 5;</div>
<div>b = c ====&gt; return 5;</div>
</td>
</tr>
<tr>
<td class="">
<div>Coercion</div>
</td>
<td class="">
<div>Converting a value from one type to another.</div>
<div>This happens quite often in Javascript because it’s dynamically typed.</div>
</td>
<td class="">
<div>var a = 1 + ‘2’;</div>
<div>console.log(a); ===&gt; 12</div>
<div>javascript engine convert 1 to a string ‘1’.</div>
</td>
</tr>
<tr>
<td class="">
<div>NaN</div>
</td>
<td class="">
<div>Not a number. Happens when try to convert not number value to a number. </div>
</td>
<td class="">
<div>Number(undefined) ===&gt; NaN</div>
<div><span>*But Number(Null) ===&gt; 0</span></div>
<div><span>false == 0 ===&gt; true</span></div>
<div><span>Null == 0 ===&gt; false</span></div>
<div><span>Null &lt; 1 ===&gt; true</span></div>
<div><span>“</span><span>” == 0 ===&gt; true</span></div>
<div><span>“” == false ===&gt; true</span></div>
<div><span>Check attachment</span></div>
</td>
</tr>
<tr>
<td class="">
<div>Boolean</div>
</td>
<td class=""> </td>
<td class="">
<div>Boolean(undefined) ===&gt; false</div>
<div>Boolean(null) ===&gt; false</div>
<div>Boolean(“”) ===&gt; false</div>
<div>Boolean(0) ===&gt; false</div>
</td>
</tr>
<tr>
<td class="">
<div>Default Value</div>
</td>
<td class=""> </td>
<td class="">
<div>true || false ===&gt; true</div>
<div>undefined || ‘hello’ ===&gt; ‘hello’</div>
<div>‘’ || ‘hello’ ===&gt; ‘hello’</div>
<div>null || ‘hello’ ===&gt; ‘hello’</div>
<div>0 || ‘hello’ ===&gt; ‘hello'</div>
</td>
</tr>
<tr>
<td class="">
<div>Object</div>
</td>
<td class="">
<div>A collection of name-value pairs, sitting in memory.</div>
<div>Can have Primitive Property, Object property and Function (Method) in memory.</div>
<div></div>
<div>Ways to create an object:</div>
<ul>
<li>
<div>var foo = new Object();</div>
</li>
<li>
<div>var foo = {};</div>
</li>
<li>
<div>var foo = {</div>
</li>
</ul>
<div>                            firstName: ‘Cayden’, </div>
<div>                            lastName: ‘Li’,</div>
<div>                            address: {</div>
<div>                                   street: ‘1 Main St.’</div>
<div>                            }</div>
<div>                            };</div>
<div></div>
<div></div>
</td>
<td class="">
<div>Can create object like following:</div>
<div><span>var foo = new Object();</span></div>
<div></div>
<div><span>foo[“firstName”] = “Cayden”;</span></div>
<div></div>
<div><span>var firstNameProperty = “firstName”;</span></div>
<div></div>
<div><span>console.log(foo[firstNameProperty]);</span> ===&gt; “Cayden” <span>same as foo.firstName</span></div>
<div></div>
</td>
</tr>
<tr>
<td class="">
<div>Namespace</div>
</td>
<td class="">
<div>A container for variables and functions. Typically to keep variables and functions with the same name separate.</div>
</td>
<td class=""> </td>
</tr>
<tr>
<td class="">
<div>JSON</div>
</td>
<td class="">
<div>Javascript Object Notation</div>
<div></div>
<div>JSON.stringify(JSONObj) ===&gt; String Value</div>
<div>JSON.parse(JSONString) ===&gt; Object Value</div>
<div></div>
<div>JSON is more strict than Javascript Object format: </div>
<ul>
<li>
<div>JSON have to quote property where javascript object don’t need to quote</div>
</li>
</ul>
</td>
<td class="">
<div>Json:</div>
<div>{</div>
<div> <span>"</span>firstName<span>”</span>: “Cayden”,</div>
<div> <span>"</span>lastName<span>”</span>: “Li"</div>
<div>}</div>
<div></div>
<div>Javascript Object</div>
<div>var foo = {</div>
<div> firstName: “Cayden”,</div>
<div> lastName: “Li"</div>
<div>}</div>
</td>
</tr>
<tr>
<td class="">
<div>Function</div>
</td>
<td class="">
<div><span>In Javascript Function is a special type of Object.</span></div>
<div></div>
<div>Because Function is an object the following code is correct and can output string “english”</div>
<div></div>
</td>
<td class="">
<div></div>
<div></div>
<div></div>
<div>All functions in Javascript also have following three special sub-functions:</div>
<div></div>
</td>
</tr>
<tr>
<td class="">
<div>First Class Functions</div>
</td>
<td class="">
<div>Everything you can do with other types you can do with functions. Assign them to variables, pass them around, create them on the fly.</div>
</td>
<td class=""> </td>
</tr>
<tr>
<td class="">
<div>Expression</div>
</td>
<td class="">
<div>A unit of code that results in a value. <span>It doesn’t have to save to a variable.</span></div>
</td>
<td class="">
<div>var a;</div>
<div>followings are expression.</div>
<div>a = 3;</div>
<div>1 + 2;</div>
<div>a = {greeting: ‘hi’};</div>
<div></div>
<div></div>
</td>
</tr>
<tr>
<td class="">
<div>Function Expression</div>
</td>
<td class="">
<div>var foo = function() {</div>
<div>   //Do something inside</div>
<div>}</div>
<div></div>
<div></div>
</td>
<td class=""> </td>
</tr>
<tr>
<td class="">
<div>Function Statement</div>
</td>
<td class="">
<div>function foo() {</div>
<div>   //Do something inside</div>
<div>}</div>
</td>
<td class="">
<div>If statement</div>
<div>if ( a===3) {</div>
<div></div>
<div>}</div>
</td>
</tr>
<tr>
<td class="">
<div>by Value by Reference</div>
</td>
<td class="">
<div>All Objects (including functions) interacts by Reference.</div>
<div></div>
<div></div>
<div><span>Equal operator sets up new memory space (new address)</span></div>
<div></div>
<div>var a = {firstName: ‘Cayden’};</div>
<div>var b = a;</div>
<div></div>
<div>b.firstName = “God”;</div>
<div>console.log(a.firstName); ===&gt; “God"</div>
<div>console.log(b.firstName); ===&gt; “God”</div>
<div></div>
<div>a = {firstName: ‘Yanfeng’};</div>
<div></div>
<div>console.log(a.firstName); ===&gt; “Yanfeng"</div>
<div>console.log(b.firstName); ===&gt; “God”</div>
</td>
<td class=""> </td>
</tr>
<tr>
<td class="">
<div>this</div>
</td>
<td class="">
<div>When you create a function, the keyword right inside the function is still pointing to the Global Object this (which is window object), but not the empty object.</div>
<div></div>
<div>The following code will output c as a Object with name property and log function:</div>
<div></div>
</td>
<td class=""> </td>
</tr>
<tr>
<td class="">
<div>Array</div>
</td>
<td class="">
<div>Javascript can have array of any data type, the following graph is correct:</div>
<div></div>
<div>and will out put </div>
<div></div>
<div></div>
</td>
<td class=""> </td>
</tr>
<tr>
<td class="">
<div>arguments</div>
</td>
<td class="">
<div>The parameters you pass to a function. </div>
<div>arguments is a keyword of Javascript that contain a list of all the parameters passed in to one function.</div>
</td>
<td class=""> </td>
</tr>
<tr>
<td class="">
<div>spread operator</div>
</td>
<td class="">
<div>… put in front of an array or an iterable object when we want to spread the array/object into an individual component </div>
<div></div>
<div>output [1, 2, 3, 4, 5, 6]</div>
</td>
<td class=""> </td>
</tr>
<tr>
<td class="">
<div>Immediately invoked functions expressions (IIFE)</div>
</td>
<td class=""> </td>
<td class="">
<div>When creating a IIFE, the following happens:</div>
<div> </div>
<div>Global variable and IIFE variable are not interfering each other.</div>
<div></div>
<div>Passing window as a global object to he IIFE, you can mutate the global object’s variable.</div>
<div></div>
</td>
</tr>
<tr>
<td class="">
<div>Closures</div>
</td>
<td class="">
<div></div>
<div>Wrong:</div>
<div></div>
<div></div>
<div></div>
<div>Correct1:</div>
<div></div>
<div></div>
<div>Correct2:</div>
<div></div>
</td>
<td class=""> </td>
</tr>
<tr>
<td class="">
<div>Function Factories</div>
</td>
<td class=""> </td>
<td class=""> </td>
</tr>
<tr>
<td class="">
<div>Callback Function</div>
</td>
<td class="">
<div>A function you give to another function, to be run when the other function is finished.</div>
<div></div>
<div>So the function you call, calls back by calling the function you gave it when it finishes.</div>
</td>
<td class=""> </td>
</tr>
<tr>
<td class="">
<div>.bind()</div>
<div>.call()</div>
<div>.apply() </div>
</td>
<td class="">
<div>.bind()</div>
<div></div>
<div></div>
<div>.call(): actually call invoke the function, the first parameter works same as .bind() which give the idea of what ‘this’ should be in the function.</div>
<div></div>
<div></div>
<div>.apply() same as .call() but need to pass an array</div>
<div></div>
</td>
<td class="">
<div>use .call() .apply() to borrow functions</div>
<div>E.g.</div>
<div><span>var person1 = {</span></div>
<div><span>   firstName: ‘Cayden’,</span></div>
<div><span>   lastName: ‘Li’,</span></div>
<div><span>   greeting: function(){</span></div>
<div><span>      console.log(‘Hi, ‘ + this.firstName + ‘ ‘ + this.lastName);</span></div>
<div><span>   }</span></div>
<div><span>}</span></div>
<div></div>
<div><span>var person2 = {</span></div>
<div><span>   firstName: ‘Yanfeng’,</span></div>
<div><span>   lastName: ‘Lee'</span></div>
<div><span>}</span></div>
<div></div>
<div><span>console.log(person1.greeting.apply(person2));</span></div>
<div></div>
<div></div>
<div></div>
<div></div>
<div></div>
</td>
</tr>
<tr>
<td class="">
<div>Function Currying</div>
</td>
<td class="">
<div>Creating a copy of a function but with some preset parameters. </div>
<div></div>
<div>Very useful in mathematical situations.</div>
</td>
<td class="">
<div><span>multipleByTwo function will set multiply function’s ‘a’ parameter permanently 2, which then when you later put 4 in multipleByTwo(4) function, you are just setting parameter b as 4, ignorance of parameter ‘a’.</span></div>
<div></div>
</td>
</tr>
<tr>
<td class="">
<div>Functional Programming</div>
</td>
<td class=""> </td>
<td class=""> </td>
</tr>
<tr>
<td class="">
<div>Inheritance</div>
</td>
<td class="">
<div>One object gets access to the properties and methods of another object.</div>
<div></div>
<div></div>
</td>
<td class=""> </td>
</tr>
<tr>
<td class="">
<div>Javascript Prototypal Inheritance</div>
</td>
<td class="">
<div>Simple, Flexible, Extensible and easy to understand.</div>
</td>
<td class=""> </td>
</tr>
<tr>
<td class="">
<div>Prototype</div>
</td>
<td class="">
<div>Has reference to other object</div>
</td>
<td class=""> </td>
</tr>
<tr>
<td class="">
<div>Reflection</div>
</td>
<td class="">
<div>An object can look at itself, listing and changing its properties and methods.</div>
</td>
<td class=""> </td>
</tr>
<tr>
<td class="">
<div>Function Constructors</div>
</td>
<td class="">
<div>A normal function that is used to construct/create <span>objects</span>.</div>
<div></div>
<div>The ‘this’ variable points a new empty object, and that object is returned from the function automatically.</div>
</td>
<td class=""> </td>
</tr>
<tr>
<td class="">
<div>Building Object in other way</div>
</td>
<td class=""> </td>
<td class=""> </td>
</tr>
<tr>
<td class="">
<div>Polyfill</div>
</td>
<td class="">
<div>Code that adds a feature which the old browser engine <span>may</span> lack.</div>
</td>
<td class=""> </td>
</tr>
<tr>
<td class="">
<div>Syntactic Sugar</div>
</td>
<td class="">
<div>A different way to type something that doesn’t change how it works under the hood.</div>
</td>
<td class=""> </td>
</tr>
<tr>
<td class="">Method Chaining</td>
<td class="">
<div>Calling one method after another, and each method affects the parent object.</div>
</td>
<td class=""> </td>
</tr>
<tr>
<td class=""> </td>
<td class=""> </td>
<td class=""> </td>
</tr>
</tbody>
</table>]]></bodyText>
        <image><![CDATA[/media/1268/javascriptbasic.png]]></image>
      </umbNewsItem>
      <umbNewsItem id="1626" key="54d60b69-13a3-4dcf-b4cb-1a69d30f73fe" parentID="1061" level="3" creatorID="0" sortOrder="6" createDate="2018-11-11T03:26:48" updateDate="2018-11-11T03:31:54" nodeName="TypeScript Watch For Code Change" urlName="typescript-watch-for-code-change" path="-1,1056,1061,1626" isDoc="" nodeType="1053" creatorName="xuebaibai2" writerName="xuebaibai2" writerID="0" template="1048" nodeTypeAlias="umbNewsItem">
        <umbracoNaviHide>0</umbracoNaviHide>
        <title><![CDATA[TypeScript watch for code change]]></title>
        <bodyText><![CDATA[<div>As of May 2018 you no longer need to create tsconfig.json manually or configure task runner.</div>
<p> </p>
<ol style="list-style-type: decimal;">
<li>
<div>Run tsc --init in your project folder to create tsconfig.json file (if you don't have one already).</div>
</li>
<li>
<div>Press Ctrl+Shift+B to open a list of tasks in VS Code and select tsc: watch - tsconfig.json.</div>
</li>
<li>
<div>Done! Your project is recompiled on every file save.</div>
</li>
</ol>
<p> </p>
<div><span>You can have several </span><span>tsconfig.json</span><span> files in your workspace and run multiple compilations at once if you want (e.g. frontend and backend separately).</span></div>
<div>   <span>from </span><a href="https://stackoverflow.com/questions/29996145/visual-studio-code-compile-on-save">https://stackoverflow.com/questions/29996145/visual-studio-code-compile-on-save</a></div>]]></bodyText>
      </umbNewsItem>
    </umbNewsOverview>
  </umbHomePage>
</root>